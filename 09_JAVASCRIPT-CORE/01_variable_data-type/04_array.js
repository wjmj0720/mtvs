/*
2차원 배열: 미니 바둑판 예제
바둑판의 각 좌표를 관리하기 위해 2차원 배열을 사용한다. 기본적으로 빈 바둑판(0)을 생성하고, 특정 위치에 돌을 놓는 작업을 수행한다.

개발 순서:
빈 4x4 바둑판을 만든다.
각 행을 직접 정의하여 배열에 추가한다.
특정 좌표에 흑돌(1)과 백돌(2)을 놓는다.
특정 행과 열 데이터를 출력한다.
*/

// 1. 바둑판 초기화: 4x4의 빈 바둑판 생성
let board = [
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0]
];

console.log("빈 바둑판:\n", board[0]+"\n" + board[1]+"\n"+ board[2]+"\n"+ board[3]);

// 2. 특정 위치에 돌 놓기
// 흑돌(1)을 (1, 1) 위치에 놓는다.
board[1][1] = 1;
// 백돌(2)을 (2, 3) 위치에 놓는다.
board[2][3] = 2;

console.log("(1, 1) 위치에 흑돌:", board[1][1]); // 출력: 1
console.log("(2, 3) 위치에 백돌:", board[2][3]); // 출력: 2

// 3. 행과 열의 데이터 접근
// 1번째 행 전체 출력
console.log("1번째 행:", board[1]);

// 2번째 열 데이터 출력
let secondColumn = [board[0][1], board[1][1], board[2][1], board[3][1]];
console.log("2번째 열:", secondColumn);

/*
응용 문제:
4x4 바둑판을 초기화하고 (0, 0) 위치에 흑돌(1), (3, 3) 위치에 백돌(2)을 놓으시오.
2번째 행에 모든 칸을 흑돌로 채우시오.
*/

/*
다차원 배열의 개념
다차원 배열은 2차원 배열을 확장하여 여러 차원의 데이터를 관리할 수 있다. 예를 들어, 여러 개의 바둑판을 관리하는 경우 다차원 배열을 사용할 수 있다.
*/

// 다차원 배열: 2개의 4x4 바둑판 관리
let multiBoard = [
    [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ],
    [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
];

// 첫 번째 바둑판의 (1, 1) 위치에 흑돌 놓기
multiBoard[0][1][1] = 1;
console.log("첫 번째 바둑판 (1, 1) 위치에 흑돌:", multiBoard[0][1][1]); // 출력: 1

// 두 번째 바둑판의 (3, 3) 위치에 백돌 놓기
multiBoard[1][3][3] = 2;
console.log("두 번째 바둑판 (3, 3) 위치에 백돌:", multiBoard[1][3][3]); // 출력: 2